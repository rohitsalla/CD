sudo apt-get install bison flex

### Step 2: Create the Flex File

Create a file named `lexer.l` with the following content. This file defines the tokens that the lexer will recognize.

%{
#include "parser.tab.h"
%}

%%

[0-9]+      { yylval = atoi(yytext); return NUMBER; }
"+"         { return PLUS; }
"*"         { return MULTIPLY; }
[ \t\n]     { /* ignore whitespace */ }
.           { return yytext[0]; }

%%

int yywrap() {
    return 1;
}

### Step 3: Create the Bison File

Create a file named `parser.y` with the following content. This file defines the grammar and the actions to be taken when rules are matched.

%{
#include <stdio.h>
#include <stdlib.h>

void yyerror(const char *s);
int yylex(void);
%}

%token NUMBER
%token PLUS MULTIPLY

%%

expression:
    term
    | expression PLUS term { printf("%d + %d = %d\n", $1, $3, $1 + $3); $$ = $1 + $3; }
    ;

term:
    factor
    | term MULTIPLY factor { printf("%d * %d = %d\n", $1, $3, $1 * $3); $$ = $1 * $3; }
    ;

factor:
    NUMBER
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main(void) {
    printf("Enter an expression: ");
    yyparse();
    return 0;
}

### Step 4: Compile the Bison and Flex Files

Run the following commands to generate the C source files from the Bison and Flex files and then compile them:

bison -d parser.y
flex lexer.l
gcc parser.tab.c lex.yy.c -o parser -lfl

### Step 5: Run the Program

Now you can run the program:

./parser


You can enter arithmetic expressions like `3 + 4 * 2` and see the output.
