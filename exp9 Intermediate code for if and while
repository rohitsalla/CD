Write an Intermediate code generation for If/While.
Create a method takes two strings as input: condition represents the condition of the if
statement, and action represents the action to be performed if the condition is true.
• Inside the generateIfCode method, a StringBuilder is used to construct the code.
• The condition and action strings are concatenated to form the if statement block.
• Finally, the generated code is returned as a string.
can customize this code by providing different conditions and actions to generate code for
different if statements. Additionally, can extend this algorithm to handle more complex ifelse or nested if statements as needed.



import java.util.*;
public class CodeGenerationForIf {
 public static void main(String[] args) {
 // Example input: if (x > 5) { y = x * 2; }
 String condition = "x > 5";
 String action = "y = x * 2;";
 // Generate code for the if statement
 String generatedCode = generateIfCode(condition, action);
 System.out.println("Generated code:");
 System.out.println(generatedCode);
 }
 public static String generateIfCode(String condition, String action) {
 StringBuilder codeBuilder = new StringBuilder();
 // Add the if statement
codeBuilder.append("if (").append(condition).append(") {\n");
 // Add the action inside the if block
 codeBuilder.append("\t").append(action).append("\n");
 // Close the if block
 codeBuilder.append("}");
 return codeBuilder.toString();
 }
}

OUTPUT:
Generated code:
if (x > 5) {
 y = x * 2;
}


C++ Code 

include <iostream>
#include <string>

using namespace std;

// Function to generate intermediate code for if-else statements
void generateIntermediateCodeIfElse(const string& condition, const string& trueBlock, const string& falseBlock = "") {
    cout << "Intermediate Code for if-else statement:" << endl;
    cout << "if (" << condition << ") {" << trueBlock << "}" << endl;
    if (!falseBlock.empty()) {
        cout << "else {" << falseBlock << "}" << endl;
    }
}

// Function to generate intermediate code for while loops
void generateIntermediateCodeWhile(const string& condition, const string& loopBlock) {
    cout << "Intermediate Code for while loop:" << endl;
    cout << "while (" << condition << ") {" << loopBlock << "}" << endl;
}

int main() {
    string ifCondition, ifTrueBlock, ifFalseBlock, whileCondition, whileBlock;

    // Get inputs for if-else statement
    cout << "Enter the condition for if-else statement: ";
    getline(cin, ifCondition);
    cout << "Enter the true block for if statement: ";
    getline(cin, ifTrueBlock);
    cout << "Enter the false block for else statement (press Enter if no else block): ";
    getline(cin, ifFalseBlock);

    // Generate intermediate code for if-else statement
    generateIntermediateCodeIfElse(ifCondition, ifTrueBlock, ifFalseBlock);

    cout << endl;

    // Get inputs for while loop
    cout << "Enter the condition for while loop: ";
    getline(cin, whileCondition);
    cout << "Enter the block for while loop: ";
    getline(cin, whileBlock);

    // Generate intermediate code for while loop
    generateIntermediateCodeWhile(whileCondition, whileBlock);

    return 0;
}


Given the program you've provided, let's walk through an example of what the input and output might look like when running this program. This example assumes the user is inputting conditions and code blocks for both an if-else statement and a while loop.

### Example Input
```
Enter the condition for if-else statement: x > 5
Enter the true block for if statement: cout << "x is greater than 5";
Enter the false block for else statement (press Enter if no else block): cout << "x is not greater than 5";

Enter the condition for while loop: i < 10
Enter the block for while loop: cout << i << " "; ++i;
```

### Corresponding Output
```
Intermediate Code for if-else statement:
if (x > 5) {cout << "x is greater than 5";}
else {cout << "x is not greater than 5";}

Intermediate Code for while loop:
while (i < 10) {cout << i << " "; ++i;}
```

### Explanation
- The program first prompts the user to enter a condition for an if-else statement. The user enters `x > 5`.
- Next, the program asks for the true block of the if statement, to which the user responds with `cout << "x is greater than 5";`.
- The program then asks for the false block of the else statement. The user inputs `cout << "x is not greater than 5";`.
- The program outputs the intermediate code for the if-else statement based on the provided inputs.
- Moving on to the while loop, the program asks for a condition, and the user inputs `i < 10`.
- The program then requests the block of code to execute within the while loop. The user enters `cout << i << " "; ++i;`.
- Finally, the program outputs the intermediate code for the while loop based on the user's inputs.

This example demonstrates how the program takes user input to generate intermediate code representations for an if-else statement and a while loop.